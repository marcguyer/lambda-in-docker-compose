AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Resources:
  PocSamLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
  PocSamLambdaFunctionB:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: index.handler
      Runtime: nodejs18.x
      Role: !GetAtt PocSamLambdaFunctionRole.Arn
      PermissionsBoundary: !GetAtt PocSamLambdaFunctionRole.Arn
      Policies:
        - PolicyName: AllowInvocationFromOtherResources
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
                Effect: Allow
              - Action:
                  - lambda:GetLayerVersion
                Resource: "*"
                Effect: Allow
              - Action:
                  - lambda:InvokeFunction
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
                Effect: Allow
#                Principal:
#                  AWS:
#                    - !Sub 'arn:aws:iam::${AWS::AccountId}:role/*'
##                    - 'arn:aws:iam::123456789012:role/other-resource-role'